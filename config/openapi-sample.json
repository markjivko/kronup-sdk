{
    "openapi": "3.0.0",
    "info": {
        "version": "0.0.1",
        "title": "api",
        "description": "# API reference\n\nThe kronup API follows [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) guidelines. All responses are [JSON-encoded](http://www.json.org/), with standard HTTP response codes and verbs.\n\n# Frameworks\n\nYou can start building your Kronup application today with our [PHP SDK](https://kronup.github.io/kronup-php/).\n\n# Authentication\n\nOur API uses a [JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token) for authentication. You can get your token form the settings page.\n\n```\n$ curl -H \"Authorization: Bearer YOUR.JWT.KEY\"\n```\n\n# Errors\n\nConventional HTTP response codes are used to indicate the status of an API request.\n\n| HTTP Status Codes |  |\n|---|---|\n| 400 - Bad Request | Invalid request, ususally due to a missing argument |\n| 401 - Unauthorized | Authorization error due to invalid, expired or missing token |\n| 402 - Request Failed | Request failed despite valid arguments |\n| 403 - Forbidden | You are not allowed to perform that request |\n| 404 - Not Found | Resource does not exist |\n| 409 - Conflict | This request is in conflict with another |\n| 429 - Too Many Requests | You are sending too many requests to our API servers |\n| 5xx - Server Errors | Something went wrong with kronup's servers |\n\n## 401 Unauthorized\n\nFor status code `401 - Unauthorized` you can receive one of the following errors:\n\n| Error ID | Error Message |\n|---|---|\n| jwt-missing | Authentication token missing |\n| jwt-format | Invalid JWT token |\n| jwt-format-header | Invalid JWT header |\n| jwt-format-body | Invalid JWT body |\n| jwt-payload | Invalid JWT payload |\n| jwt-issuer | Invalid JWT issuer |\n| jwt-public-key | Could not fetch JWT public key |\n| auth-missing | Authorization header missing |\n| auth-invalid | Wrong authorization strategy |\n| auth-api-invalid | API user does not exist |\n| auth-api-expired | API token is no longer valid |",
        "x-logo": {
            "url": "/img/banner.svg",
            "altText": "kronup"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "servers": [
        {
            "url": "https://api.kronup.com/v1"
        }
    ],
    "tags": [
        {
            "name": "Account",
            "description": "Manage the current account. \nThese methods apply to the identity declared in the authorization bearer token."
        },
        {
            "name": "Users",
            "description": "Manage users within the scope of an organization.\n\nThere are 3 site-level roles: **admin**, **moderator** and **user**.\n\nAdmins and moderators have access to account data outside of their organization (read as **A can B**):\n\n\n|  | B: admin | B: moderator | B: user |\n|---|---|---|---|\n| A: admin | read/write | read/write | read/write |\n| A: moderator | read | read/write | read/write |\n| A: user | - | - | - |\n\n\nThere are 3 organization-level roles: **owner**, **manager** and **member**.\n\nWithin the same organization, account actions are limited (read as **A can B**):\n\n\n|  | B: owner | B: manager | B: member |\n|---|---|---|---|\n| A: owner | read/write | read/write | read/write |\n| A: manager | read | read/write | read/write |\n| A: member | read | read | read |\n\n\n\n* Any account has **read/write** permissions over **itself**\n* Site-level roles have priority over organization-level roles for **write** rules\n* Organization-level roles have priority over site-level roles for **read** rules"
        },
        {
            "name": "Organizations",
            "description": "Each account owns at least **1** and at most **10** Organizations.\n\nThese are the role-based access control rules for organizations:\n\n| Organization Role \\ Action | Read * | Write * | Delete ** |\n|---|---|---|---|\n| Owner | yes | yes | yes |\n| Manager | yes | yes | no |\n| Member | yes | no | no |\n\n\n(*) The **read** and **write** actions refer to all endpoints that require the **x-org-id** header.\n\n(**) The **delete** action refers to removing the Organization model."
        },
        {
            "name": "Invitations",
            "description": "Invitations follow the [Organization](#tag/Organizations) role-based access control rules.\n\nEach organization can have a maximum of **50** invitations."
        }
    ],
    "paths": {
        "/account": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Read account data",
                "description": "Retrieve the current account model",
                "operationId": "accountRead",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account model found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url https://api.kronup.com/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/account\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/account\")\n  .get()\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/account\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/account\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Update account data",
                "description": "Update the current account model",
                "operationId": "accountUpdate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account model updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "userName": {
                                        "type": "string",
                                        "description": "New user name",
                                        "example": "John Doe"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"userName\":\"John Doe\"}'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/account\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({userName: 'John Doe'}));\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"userName\\\":\\\"John Doe\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/account\")\n  .post(body)\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/account\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"userName\\\":\\\"John Doe\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/account\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"userName\\\":\\\"John Doe\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"userName\\\":\\\"John Doe\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Account"
                ],
                "summary": "Delete account",
                "description": "Delete current account, along with any organization under sole ownership of this account",
                "operationId": "accountDelete",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account model deleted. Returns a list of organizations deleted with this account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "List of Organization IDs",
                                    "items": {
                                        "type": "string",
                                        "title": "Organization ID"
                                    },
                                    "example": [
                                        "org-id-1**",
                                        "org-id-2**"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url https://api.kronup.com/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/account\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/account\")\n  .delete(null)\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/account\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/account\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        },
        "/invitations/{id}": {
            "put": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Accept invitation",
                "description": "Accept an invitation to join an organization",
                "operationId": "invitationAccept",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/invitations/invitation-id-***\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n  .put(null)\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/invitations/invitation-id-***\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/invitations/invitation-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Read invitation",
                "description": "Fetch invitation data",
                "operationId": "invitationRead",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/invitations/invitation-id-***\",\n  \"headers\": {}\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/invitations/invitation-id-***\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/invitations/invitation-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Update invitation",
                "description": "Update invitation details",
                "operationId": "invitationUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "inviteName": {
                                        "type": "string",
                                        "description": "Invitation name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "inviteDomain": {
                                        "type": "string",
                                        "description": "User email domain name. If specified, restrict access to e-mail addresses belonging to this domain.",
                                        "maxLength": 64,
                                        "default": ""
                                    },
                                    "inviteOrgRole": {
                                        "type": "string",
                                        "description": "User role",
                                        "enum": [
                                            "manager",
                                            "member"
                                        ],
                                        "default": "member",
                                        "example": "member"
                                    },
                                    "inviteExpireDays": {
                                        "type": "integer",
                                        "description": "The invitation expires after this many days. 0 = no expiration",
                                        "minimum": 0,
                                        "default": 0,
                                        "example": 5
                                    },
                                    "inviteUsesMax": {
                                        "type": "integer",
                                        "description": "The invitation expires after being used this many times. 0 = no expiration",
                                        "minimum": 0,
                                        "maximum": 10000,
                                        "default": 0,
                                        "example": 10
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"inviteName\":\"string\",\"inviteDomain\":\"\",\"inviteOrgRole\":\"member\",\"inviteExpireDays\":5,\"inviteUsesMax\":10}'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/invitations/invitation-id-***\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  inviteName: 'string',\n  inviteDomain: '',\n  inviteOrgRole: 'member',\n  inviteExpireDays: 5,\n  inviteUsesMax: 10\n}));\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n  .post(body)\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/invitations/invitation-id-***\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/invitations/invitation-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Delete invitation",
                "description": "Delete invitation",
                "operationId": "invitationDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/invitations/invitation-id-***\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n  .delete(null)\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/invitations/invitation-id-***\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/invitations/invitation-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/invitations/invitation-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        },
        "/invitations": {
            "post": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Create invitation",
                "description": "Create a new invitation to this organization",
                "operationId": "invitationCreate",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "inviteName": {
                                        "type": "string",
                                        "description": "Invitation name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "inviteDomain": {
                                        "type": "string",
                                        "description": "User email domain name. If specified, restrict access to e-mail addresses belonging to this domain.",
                                        "maxLength": 64,
                                        "default": ""
                                    },
                                    "inviteOrgRole": {
                                        "type": "string",
                                        "description": "User role",
                                        "enum": [
                                            "manager",
                                            "member"
                                        ],
                                        "default": "member",
                                        "example": "member"
                                    },
                                    "inviteExpireDays": {
                                        "type": "integer",
                                        "description": "The invitation expires after this many days. 0 = no expiration",
                                        "minimum": 0,
                                        "maximum": 365,
                                        "default": 0,
                                        "example": 5
                                    },
                                    "inviteUsesMax": {
                                        "type": "integer",
                                        "description": "The invitation expires after being used this many times. 0 = no expiration",
                                        "minimum": 0,
                                        "maximum": 10000,
                                        "default": 0,
                                        "example": 10
                                    }
                                },
                                "required": [
                                    "inviteName"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/invitations \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"inviteName\":\"string\",\"inviteDomain\":\"\",\"inviteOrgRole\":\"member\",\"inviteExpireDays\":5,\"inviteUsesMax\":10}'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/invitations\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  inviteName: 'string',\n  inviteDomain: '',\n  inviteOrgRole: 'member',\n  inviteExpireDays: 5,\n  inviteUsesMax: 10\n}));\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/invitations\")\n  .post(body)\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/invitations\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/invitations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/invitations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"inviteName\\\":\\\"string\\\",\\\"inviteDomain\\\":\\\"\\\",\\\"inviteOrgRole\\\":\\\"member\\\",\\\"inviteExpireDays\\\":5,\\\"inviteUsesMax\\\":10}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Invitations"
                ],
                "summary": "List all invitations",
                "description": "Get a list of all invitations",
                "operationId": "invitationList",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invitations for organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url https://api.kronup.com/v1/invitations \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/invitations\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/invitations\")\n  .get()\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/invitations\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/invitations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/invitations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        },
        "/organizations": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Create organization",
                "description": "Add an organization owned by the current user",
                "operationId": "organizationCreate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Organization created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "orgName": {
                                        "type": "string",
                                        "description": "Organization name",
                                        "minLength": 3,
                                        "maxLength": 64,
                                        "example": "Example, Inc."
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/organizations \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"orgName\":\"Example, Inc.\"}'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/organizations\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({orgName: 'Example, Inc.'}));\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/organizations\")\n  .post(body)\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/organizations\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/organizations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        },
        "/organizations/{id}": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Update organization",
                "description": "Update organization details",
                "operationId": "organizationUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Organization ID",
                        "example": "org-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "orgName": {
                                        "type": "string",
                                        "description": "Organization name",
                                        "minLength": 3,
                                        "maxLength": 64,
                                        "example": "Example, Inc."
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/organizations/org-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"orgName\":\"Example, Inc.\"}'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/organizations/org-id-***\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({orgName: 'Example, Inc.'}));\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/organizations/org-id-***\")\n  .post(body)\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/organizations/org-id-***\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/organizations/org-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/organizations/org-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"orgName\\\":\\\"Example, Inc.\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List all users",
                "description": "Get a list of user models; supports pagination",
                "operationId": "userList",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Pagination: page number",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "example": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Pagination: page size",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "minimum": 1,
                            "example": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users in organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "UserList",
                                    "type": "object",
                                    "properties": {
                                        "pageSize": {
                                            "type": "integer",
                                            "description": "Page size",
                                            "example": 100
                                        },
                                        "pageNumber": {
                                            "type": "integer",
                                            "description": "Page number",
                                            "example": 1
                                        },
                                        "users": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/users?pageNumber=1&pageSize=100' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/users?pageNumber=1&pageSize=100\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/users?pageNumber=1&pageSize=100\")\n  .get()\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/users?pageNumber=1&pageSize=100\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/users?pageNumber=1&pageSize=100\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/users?pageNumber=1&pageSize=100\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user",
                "description": "Retrieve the user model and expand organizations",
                "operationId": "userRead",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account model found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/user-id-***\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/users/user-id-***\")\n  .get()\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/users/user-id-***\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/users/user-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/users/user-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Update role",
                "description": "Update the user model",
                "operationId": "userUpdateRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated. Returns updated fields and their new values",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "UserRoles",
                                    "type": "object",
                                    "properties": {
                                        "roleSite": {
                                            "type": "string",
                                            "description": "User site role",
                                            "enum": [
                                                "admin",
                                                "moderator",
                                                "user"
                                            ]
                                        },
                                        "roleOrg": {
                                            "type": "string",
                                            "description": "User organization role",
                                            "enum": [
                                                "owner",
                                                "manager",
                                                "member"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "roleSite": {
                                        "type": "string",
                                        "description": "New site role",
                                        "example": "user"
                                    },
                                    "roleOrg": {
                                        "type": "string",
                                        "description": "New organization role",
                                        "example": "member"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"roleSite\":\"user\",\"roleOrg\":\"member\"}'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/user-id-***\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({roleSite: 'user', roleOrg: 'member'}));\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"roleSite\\\":\\\"user\\\",\\\"roleOrg\\\":\\\"member\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/users/user-id-***\")\n  .post(body)\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/users/user-id-***\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"roleSite\\\":\\\"user\\\",\\\"roleOrg\\\":\\\"member\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/users/user-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"roleSite\\\":\\\"user\\\",\\\"roleOrg\\\":\\\"member\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/users/user-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"roleSite\\\":\\\"user\\\",\\\"roleOrg\\\":\\\"member\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Remove user",
                "description": "Remove user from Organization",
                "operationId": "userRemove",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User removed from organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    },
                    {
                        "lang": "Node",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.kronup.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/user-id-***\",\n  \"headers\": {\n    \"x-org-id\": \"org-id-***\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Java",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kronup.com/v1/users/user-id-***\")\n  .delete(null)\n  .addHeader(\"x-org-id\", \"org-id-***\")\n  .addHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "C#",
                        "source": "var client = new RestClient(\"https://api.kronup.com/v1/users/user-id-***\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"x-org-id\", \"org-id-***\");\nrequest.AddHeader(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.kronup.com/v1/users/user-id-***\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-org-id\"] = 'org-id-***'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.kronup.com/v1/users/user-id-***\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"x-org-id: org-id-***\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Error400": {
                "description": "Invalid argument error",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 400 ID",
                        "description": "Unique lowercase string that identifies this 400 error",
                        "example": "invalid-argument-*"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 400 message",
                        "description": "400 Error message (supports i18n)",
                        "example": "Invalid arguments provided"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error401": {
                "description": "Unauthorized error",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 401 ID",
                        "description": "Unique lowercase string that identifies this 401 error",
                        "example": "jwt/auth-*"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 401 message",
                        "description": "401 Error message (supports i18n)",
                        "example": "Authorization error"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error402": {
                "description": "Payment required",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 402 ID",
                        "description": "Unique lowercase string that identifies this 402 error",
                        "example": "payment-*"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 402 message",
                        "description": "402 Error message (supports i18n)",
                        "example": "Payment required error"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error403": {
                "description": "Operation not allowed",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 403 ID",
                        "description": "Unique lowercase string that identifies this 403 error",
                        "example": "not-allowed"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 403 message",
                        "description": "403 Error message (supports i18n)",
                        "example": "Not allowed"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error404": {
                "description": "Resource not found",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 404 ID",
                        "description": "Unique lowercase string that identifies this 404 error",
                        "example": "not-found"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 404 message",
                        "description": "404 Error message (supports i18n)",
                        "example": "Not found"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Account": {
                "type": "object",
                "title": "Account",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "User e-mail address",
                        "example": "john@example.com"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name",
                        "example": "John Doe"
                    },
                    "userIcon": {
                        "type": "string",
                        "description": "User icon URL",
                        "example": "https://***"
                    },
                    "userTokenIat": {
                        "type": "integer",
                        "description": "User token creation timestamp",
                        "example": 1663663000
                    },
                    "roleSite": {
                        "type": "string",
                        "description": "User site role",
                        "enum": [
                            "admin",
                            "moderator",
                            "user"
                        ]
                    },
                    "roleOrg": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "orgId": {
                                    "type": "string",
                                    "description": "Organization ID",
                                    "example": "org-id-***"
                                },
                                "role": {
                                    "type": "string",
                                    "description": "User organization role",
                                    "enum": [
                                        "owner",
                                        "manager",
                                        "member"
                                    ]
                                }
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "orgs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Organization"
                        }
                    }
                }
            },
            "Cache": {
                "type": "object",
                "title": "Cache",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Item ID",
                        "example": "key"
                    },
                    "value": {
                        "type": "string",
                        "description": "Item value",
                        "example": "value"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "Invitation": {
                "type": "object",
                "title": "Invitation",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization ID",
                        "example": "org-id-***"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    "inviteName": {
                        "type": "string",
                        "description": "Invitation name",
                        "example": "General public"
                    },
                    "inviteDomain": {
                        "type": "string",
                        "description": "Invitation domain",
                        "example": "example.com"
                    },
                    "inviteOrgRole": {
                        "type": "string",
                        "description": "Invitation user role",
                        "enum": [
                            "manager",
                            "member"
                        ]
                    },
                    "inviteOrgName": {
                        "type": "string",
                        "description": "Invitation organzation name",
                        "example": "Organization, Inc."
                    },
                    "inviteUses": {
                        "type": "integer",
                        "min": 0,
                        "description": "Number of uses",
                        "example": 0
                    },
                    "inviteUsesMax": {
                        "type": "integer",
                        "min": 0,
                        "max": 10000,
                        "description": "Maximum number of uses",
                        "example": 0
                    },
                    "inviteViews": {
                        "type": "integer",
                        "min": 0,
                        "description": "Number of views",
                        "example": 0
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expires timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "Organization": {
                "type": "object",
                "title": "Organization",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Organization ID",
                        "example": "org-id-***"
                    },
                    "orgName": {
                        "type": "string",
                        "description": "Organization name",
                        "example": "Organization, Inc."
                    },
                    "orgIcon": {
                        "type": "string",
                        "description": "Organization logo URL",
                        "example": "https://***"
                    },
                    "orgOwners": {
                        "type": "array",
                        "description": "Organization owners",
                        "items": {
                            "type": "string",
                            "title": "User ID",
                            "example": "user-id-***"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "User": {
                "type": "object",
                "title": "User",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "User e-mail address",
                        "example": "john@example.com"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name",
                        "example": "John Doe"
                    },
                    "userIcon": {
                        "type": "string",
                        "description": "User icon URL",
                        "example": "https://***"
                    },
                    "userTokenIat": {
                        "type": "integer",
                        "description": "User token creation timestamp",
                        "example": 1663663000
                    },
                    "roleSite": {
                        "type": "string",
                        "description": "User site role",
                        "enum": [
                            "admin",
                            "moderator",
                            "user"
                        ]
                    },
                    "roleOrg": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "orgId": {
                                    "type": "string",
                                    "description": "Organization ID",
                                    "example": "org-id-***"
                                },
                                "role": {
                                    "type": "string",
                                    "description": "User organization role",
                                    "enum": [
                                        "owner",
                                        "manager",
                                        "member"
                                    ]
                                }
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "orgs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Organization"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "API Key",
                "scheme": "bearer",
                "bearerFormat": "JSON Web Token"
            }
        }
    },
    "x-tagGroups": [
        {
            "name": "API",
            "tags": [
                "Account",
                "Users",
                "Organizations",
                "Invitations"
            ]
        }
    ]
}