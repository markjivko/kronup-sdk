{
    "openapi": "3.0.0",
    "info": {
        "version": "0.0.1",
        "title": "kronup / api",
        "description": "# API reference\n\nThe kronup API follows [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) guidelines. All responses are [JSON-encoded](http://www.json.org/), with standard HTTP response codes and verbs.\n\n# Frameworks\n\nYou can start building your kronup application today with our [PHP SDK](https://kronup.github.io/kronup-php/).\n\n# Authorization\n\nOur API uses a [JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token) for authentication. \n\nYou can get your token form the settings page.\n\n```\n$ curl -H \"Authorization: Bearer YOUR.JWT.KEY\"\n```\n\n# Errors\n\nConventional HTTP response codes are used to indicate the status of an API request.\n\n| HTTP Status Codes |  |\n|---|---|\n| 400 - Bad Request | Invalid request, ususally due to a missing argument |\n| 401 - Unauthorized | Authorization error due to invalid, expired or missing token |\n| 402 - Request Failed | Payment required |\n| 403 - Forbidden | You are not allowed to perform that request |\n| 404 - Not Found | Resource does not exist |\n| 409 - Conflict | This request is in conflict with another |\n| 429 - Too Many Requests | You are sending too many requests to our API servers |\n| 5xx - Server Errors | Something went wrong with kronup's servers |\n\n## 401 Unauthorized\n\nFor status code `401 - Unauthorized` you can receive one of the following errors:\n\n| Error ID | Error Message |\n|---|---|\n| jwt-missing | Authentication token missing |\n| jwt-format | Invalid JWT token |\n| jwt-format-header | Invalid JWT header |\n| jwt-format-body | Invalid JWT body |\n| jwt-payload | Invalid JWT payload |\n| jwt-issuer | Invalid JWT issuer |\n| jwt-public-key | Could not fetch JWT public key |\n| auth-missing | Authorization header missing |\n| auth-invalid | Wrong authorization strategy |\n| auth-api-invalid | API user does not exist |\n| auth-api-expired | API token is no longer valid |",
        "x-logo": {
            "url": "/img/banner.svg",
            "altText": "kronup"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "servers": [
        {
            "url": "https://api.kronup.com/v1"
        }
    ],
    "tags": [
        {
            "name": "Account",
            "description": "Manage the current account. \nThese methods apply to the identity declared in the authorization bearer token."
        },
        {
            "name": "Users",
            "description": "Manage users within the scope of an [Organization](#tag/Organizations).\n\nThere are 3 site-level roles: **admin**, **moderator** and **user**.\n\nAdmins and moderators have access to account data outside of their organization (read as **A can B**):\n\n\n|  | B: admin | B: moderator | B: user |\n|---|---|---|---|\n| A: admin | read/write | read/write | read/write |\n| A: moderator | read | read/write | read/write |\n| A: user | - | - | - |\n\n\nThere are 3 organization-level roles: **owner**, **manager** and **member**.\n\nWithin the same organization, account actions are limited (read as **A can B**):\n\n\n|  | B: owner | B: manager | B: member |\n|---|---|---|---|\n| A: owner | read/write | read/write | read/write |\n| A: manager | read | read/write | read/write |\n| A: member | read | read | read |\n\n\n\n* Any account has **read/write** permissions over **itself**\n* Site-level roles have priority over organization-level roles for **write** rules\n* Organization-level roles have priority over site-level roles for **read** rules"
        },
        {
            "name": "Invitations",
            "description": "Invitations follow the [Organization](#tag/Organizations) role-based access control rules.\n\nEach organization can have a maximum of **500** invitations."
        },
        {
            "name": "Organizations",
            "description": "Each [Account](#tag/Account) owns at most **50** Organizations.\n\nThese are the role-based access control rules for organizations:\n\n| Organization Role \\ Action | Read * | Write * | Delete ** |\n|---|---|---|---|\n| Owner | yes | yes | yes |\n| Manager | yes | yes | no |\n| Member | yes | no | no |\n\n\n(*) The **read** and **write** actions refer to all endpoints that require the **x-org-id** header.\n\n(**) The **delete** action refers to removing the Organization model."
        },
        {
            "name": "Teams",
            "description": "Each [Organization](#tag/Organizations) has at least **1** and at most **100** Teams."
        },
        {
            "name": "Channels",
            "description": "Each [Team](#tag/Teams) has at least **1** and at most **100** Channels."
        },
        {
            "name": "Value items",
            "description": "Instead of `issues`, we're using `value items` to emphasise that everything must be viewed through the lens of customer value.\n\nValue items are debated and advanced in [Channels](#tag/Channels). \n\nEach `value item` has length restrictions to encourage brevity and to ensure that all team members are well-informed quickly."
        },
        {
            "name": "Assumptions",
            "description": "Each [value item](#tag/Value-items) has at least **1** and at most **100** Assumptions.\n\nLess is more, so focus on having smaller value items with fewer assumptions per item.\n\nAssumptions need to be validated by running experiments or by relying on past results."
        },
        {
            "name": "Tasks",
            "description": "Each [value item](#tag/Value-items) has at least **1** and at most **100** Tasks.\n        \nUse divide-et-impera as often as you like, but preferably keep you value items as short as possible.\n\nAll tasks must be marked as done before the value item can be retired to deep context."
        }
    ],
    "paths": {
        "/account": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Fetch account",
                "description": "Retrieve the current account model",
                "operationId": "accountRead",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account model found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url https://api.kronup.com/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Update account",
                "description": "Update the current account model.",
                "operationId": "accountUpdate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account model updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Account Update",
                                "properties": {
                                    "userName": {
                                        "type": "string",
                                        "description": "New user name",
                                        "example": "John Doe"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"userName\":\"John Doe\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Account"
                ],
                "summary": "Delete account",
                "description": "Delete the current account. This action is reversible only if you sign back in within 14 days. API calls and service accounts cannot restore deleted accounts.",
                "operationId": "accountDelete",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account model deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url https://api.kronup.com/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    }
                ]
            }
        },
        "/invitations": {
            "post": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Create invitation",
                "description": "Create a new invitation to this organization",
                "operationId": "invitationCreate",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Invitation Create",
                                "properties": {
                                    "inviteName": {
                                        "type": "string",
                                        "description": "Invitation name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "inviteDomain": {
                                        "type": "string",
                                        "description": "User email domain name. If specified, restrict access to e-mail addresses belonging to this domain.",
                                        "maxLength": 64,
                                        "default": ""
                                    },
                                    "inviteOrgRole": {
                                        "type": "string",
                                        "description": "User role",
                                        "enum": [
                                            "manager",
                                            "member"
                                        ],
                                        "default": "member",
                                        "example": "member"
                                    },
                                    "inviteExpireDays": {
                                        "type": "integer",
                                        "description": "The invitation expires after this many days. 0 = no expiration",
                                        "minimum": 0,
                                        "maximum": 365,
                                        "default": 0,
                                        "example": 5
                                    },
                                    "inviteUsesMax": {
                                        "type": "integer",
                                        "description": "The invitation expires after being used this many times. 0 = no expiration",
                                        "minimum": 0,
                                        "maximum": 10000,
                                        "default": 0,
                                        "example": 10
                                    }
                                },
                                "required": [
                                    "inviteName"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/invitations \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"inviteName\":\"string\",\"inviteDomain\":\"\",\"inviteOrgRole\":\"member\",\"inviteExpireDays\":5,\"inviteUsesMax\":10}'"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Invitations"
                ],
                "summary": "List invitations",
                "description": "Get a list of invitation models",
                "operationId": "invitationList",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invitations for organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url https://api.kronup.com/v1/invitations \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/invitations/{inviteId}": {
            "get": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Fetch invitation",
                "description": "Retrieve invitation model",
                "operationId": "invitationRead",
                "parameters": [
                    {
                        "name": "inviteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Update invitation",
                "description": "Update invitation details",
                "operationId": "invitationUpdate",
                "parameters": [
                    {
                        "name": "inviteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Invitation Update",
                                "properties": {
                                    "inviteName": {
                                        "type": "string",
                                        "description": "Invitation name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "inviteDomain": {
                                        "type": "string",
                                        "description": "User email domain name. If specified, restrict access to e-mail addresses belonging to this domain.",
                                        "maxLength": 64,
                                        "default": ""
                                    },
                                    "inviteOrgRole": {
                                        "type": "string",
                                        "description": "User role",
                                        "enum": [
                                            "manager",
                                            "member"
                                        ],
                                        "default": "member",
                                        "example": "member"
                                    },
                                    "inviteExpireDays": {
                                        "type": "integer",
                                        "description": "The invitation expires after this many days. 0 = no expiration",
                                        "minimum": 0,
                                        "default": 0,
                                        "example": 5
                                    },
                                    "inviteUsesMax": {
                                        "type": "integer",
                                        "description": "The invitation expires after being used this many times. 0 = no expiration",
                                        "minimum": 0,
                                        "maximum": 10000,
                                        "default": 0,
                                        "example": 10
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"inviteName\":\"string\",\"inviteDomain\":\"\",\"inviteOrgRole\":\"member\",\"inviteExpireDays\":5,\"inviteUsesMax\":10}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Delete invitation",
                "description": "Delete invitation",
                "operationId": "invitationDelete",
                "parameters": [
                    {
                        "name": "inviteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Invitations"
                ],
                "summary": "Accept invitation",
                "description": "Accept an invitation to join an organization",
                "operationId": "invitationAccept",
                "parameters": [
                    {
                        "name": "inviteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/invitations/invitation-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items": {
            "post": {
                "tags": [
                    "Value items"
                ],
                "summary": "Create value item",
                "description": "Add a value item to planning",
                "operationId": "valueItemCreate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value item created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Value Item Create",
                                "properties": {
                                    "digest": {
                                        "type": "string",
                                        "description": "Value item digest",
                                        "minLength": 1,
                                        "maxLength": 256,
                                        "example": "Feature name"
                                    },
                                    "details": {
                                        "type": "string",
                                        "description": "Value item description",
                                        "minLength": 1,
                                        "maxLength": 4096,
                                        "example": "Feature description"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Value item type   * f - Feature  * b - Bug fix  * c - Chore",
                                        "enum": [
                                            "f",
                                            "b",
                                            "c"
                                        ],
                                        "example": "f"
                                    },
                                    "priority": {
                                        "type": "string",
                                        "description": "Value item MoSCoW priority  * m - Must-have  * s - Should-have  * c - Could-have  * w - Will NOT have",
                                        "enum": [
                                            "m",
                                            "s",
                                            "c",
                                            "w"
                                        ],
                                        "example": "m"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"digest\":\"Feature name\",\"details\":\"Feature description\",\"type\":\"f\",\"priority\":\"m\"}'"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Value items"
                ],
                "summary": "List value items",
                "description": "Get a list of value item models",
                "operationId": "valueItemList",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Pagination: page number",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "example": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Pagination: page size",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "minimum": 1,
                            "example": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of value items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Value Items List",
                                    "type": "object",
                                    "properties": {
                                        "pageSize": {
                                            "type": "integer",
                                            "description": "Page size",
                                            "example": 100
                                        },
                                        "pageNumber": {
                                            "type": "integer",
                                            "description": "Page number",
                                            "example": 1
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ValueItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items?pageNumber=1&pageSize=100' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}": {
            "get": {
                "tags": [
                    "Value items"
                ],
                "summary": "Fetch value item",
                "description": "Retrieve value item model",
                "operationId": "valueItemRead",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value item found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Value items"
                ],
                "summary": "Update value item",
                "description": "Update value item details",
                "operationId": "valueItemUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value item updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Value Item Update",
                                "properties": {
                                    "digest": {
                                        "type": "string",
                                        "description": "Value item digest",
                                        "minLength": 1,
                                        "maxLength": 256,
                                        "example": "Feature name"
                                    },
                                    "details": {
                                        "type": "string",
                                        "description": "Value item description",
                                        "minLength": 1,
                                        "maxLength": 4096,
                                        "example": "Feature description"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Value item type:  * f - Feature  * b - Bug fix  * c - Chore",
                                        "enum": [
                                            "f",
                                            "b",
                                            "c"
                                        ],
                                        "example": "f"
                                    },
                                    "priority": {
                                        "type": "string",
                                        "description": "Value item MoSCoW priority:  * m - Must-have  * s - Should-have  * c - Could-have  * w - Will NOT have",
                                        "enum": [
                                            "m",
                                            "s",
                                            "c",
                                            "w"
                                        ],
                                        "example": "m"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"digest\":\"Feature name\",\"details\":\"Feature description\",\"type\":\"f\",\"priority\":\"m\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Value items"
                ],
                "summary": "Delete value item",
                "description": "Delete a value item from the flow",
                "operationId": "valueItemDelete",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value item deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Value items"
                ],
                "summary": "Advance value item",
                "description": "Advance a value item",
                "operationId": "valueItemAdvance",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value item advanced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValueItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/assms": {
            "post": {
                "tags": [
                    "Assumptions"
                ],
                "summary": "Create assumption",
                "description": "Add an assumption to value item",
                "operationId": "assumptionCreate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assumption created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assumption"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Assm Create",
                                "properties": {
                                    "digest": {
                                        "type": "string",
                                        "description": "Assumption digest",
                                        "minLength": 1,
                                        "maxLength": 256,
                                        "example": "This thing is possible"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/assms' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"digest\":\"This thing is possible\"}'"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Assumptions"
                ],
                "summary": "List assumptions",
                "description": "Get a list of assumption models",
                "operationId": "assumptionList",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Pagination: page number",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "example": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Pagination: page size",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "minimum": 1,
                            "example": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of assumptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Assumptions List",
                                    "type": "object",
                                    "properties": {
                                        "pageSize": {
                                            "type": "integer",
                                            "description": "Page size",
                                            "example": 100
                                        },
                                        "pageNumber": {
                                            "type": "integer",
                                            "description": "Page number",
                                            "example": 1
                                        },
                                        "assumptions": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Assumption"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/assms?pageNumber=1&pageSize=100' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/assms/{assmId}": {
            "get": {
                "tags": [
                    "Assumptions"
                ],
                "summary": "Fetch assumption",
                "description": "Retrieve assumption model",
                "operationId": "assumptionRead",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "assmId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Assumption ID",
                        "example": "assm-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assumption found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assumption"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/assms/assm-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Assumptions"
                ],
                "summary": "Update assumption",
                "description": "Update assumption details",
                "operationId": "assumptionUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "assmId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Assumption ID",
                        "example": "assm-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assumption updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assumption"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Assm Update",
                                "properties": {
                                    "digest": {
                                        "type": "string",
                                        "description": "Assumption digest",
                                        "minLength": 1,
                                        "maxLength": 256,
                                        "example": "Feature name"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/assms/assm-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"digest\":\"Feature name\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Assumptions"
                ],
                "summary": "Delete assumption",
                "description": "Delete an assumption from a value item",
                "operationId": "assumptionDelete",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "assmId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Assumption ID",
                        "example": "assm-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assumption deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assumption"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/assms/assm-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/assms/{assmId}/exp": {
            "post": {
                "tags": [
                    "Assumptions"
                ],
                "summary": "Validate",
                "description": "Update experiment details",
                "operationId": "assumptionValidate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "assmId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Assumption ID",
                        "example": "assm-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assumption updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assumption"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Assm Validate",
                                "properties": {
                                    "confirmed": {
                                        "type": "boolean",
                                        "description": "Experiment confirms assumption"
                                    },
                                    "digest": {
                                        "type": "string",
                                        "description": "Experiment digest",
                                        "minLength": 1,
                                        "maxLength": 256
                                    },
                                    "details": {
                                        "type": "string",
                                        "description": "Experiment findings",
                                        "minLength": 1,
                                        "maxLength": 4096
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "Experiment state:  * i - Idle  * r - Running  * d - Done",
                                        "enum": [
                                            "i",
                                            "r",
                                            "d"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/assms/assm-id-***/exp' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"confirmed\":true,\"digest\":\"string\",\"details\":\"string\",\"state\":\"i\"}'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create task",
                "description": "Add a task to value item",
                "operationId": "taskCreate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Create",
                                "properties": {
                                    "digest": {
                                        "type": "string",
                                        "description": "Task digest",
                                        "minLength": 1,
                                        "maxLength": 256
                                    },
                                    "details": {
                                        "type": "string",
                                        "description": "Task details",
                                        "minLength": 1,
                                        "maxLength": 4096
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"digest\":\"string\",\"details\":\"string\"}'"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "List tasks",
                "description": "Get a list of task models",
                "operationId": "taskList",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Pagination: page number",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "example": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Pagination: page size",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "minimum": 1,
                            "example": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tasks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Tasks List",
                                    "type": "object",
                                    "properties": {
                                        "pageSize": {
                                            "type": "integer",
                                            "description": "Page size",
                                            "example": 100
                                        },
                                        "pageNumber": {
                                            "type": "integer",
                                            "description": "Page number",
                                            "example": 1
                                        },
                                        "tasks": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TaskCore"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks?pageNumber=1&pageSize=100' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Fetch task",
                "description": "Retrieve task model",
                "operationId": "taskRead",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update task",
                "description": "Update task details",
                "operationId": "taskUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Update",
                                "properties": {
                                    "digest": {
                                        "type": "string",
                                        "description": "Task digest",
                                        "minLength": 1,
                                        "maxLength": 256
                                    },
                                    "details": {
                                        "type": "string",
                                        "description": "Task details",
                                        "minLength": 1,
                                        "maxLength": 4096
                                    },
                                    "state": {
                                        "type": "string",
                                        "enum": [
                                            "i",
                                            "p",
                                            "r",
                                            "d"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"digest\":\"string\",\"details\":\"string\",\"state\":\"i\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete task",
                "description": "Delete a task from a value item",
                "operationId": "taskDelete",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/users/{userId}": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Assign to user",
                "description": "Assign task to user",
                "operationId": "taskAssign",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task assigned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCore"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/keywords/{keywordId}": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Add keyword",
                "description": "Add a keyword to task",
                "operationId": "taskKeywordAdd",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "keywordId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Keyword ID",
                        "example": "keyword-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Keyword added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/keywords/keyword-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Remove keyword",
                "description": "Remove a keyword from task",
                "operationId": "taskKeywordRemove",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "keywordId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Keyword ID",
                        "example": "keyword-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Keyword removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/keywords/keyword-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create discovery",
                "description": "Add a discovery to task",
                "operationId": "taskDiscoveryCreate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Discovery created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Discovery Create",
                                "properties": {
                                    "details": {
                                        "type": "string",
                                        "description": "Discovery details",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/discoveries' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"details\":\"string\"}'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries/{discoveryId}": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update discovery",
                "description": "Update a task discovery",
                "operationId": "taskDiscoveryUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "discoveryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Discovery ID",
                        "example": "discovery-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Discovery updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Discovery Update",
                                "properties": {
                                    "details": {
                                        "type": "string",
                                        "description": "Discovery details",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/discoveries/discovery-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"details\":\"string\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Remove discovery",
                "description": "Remove a task discovery",
                "operationId": "taskDiscoveryRemove",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "discoveryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Discovery ID",
                        "example": "discovery-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Discovery removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/discoveries/discovery-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create feedback",
                "description": "Add a feedback to task",
                "operationId": "taskFeedbackCreate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedback created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Feedback Create",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Feedback details",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    },
                                    "issue": {
                                        "type": "string",
                                        "description": "Feedback issue"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/feedback' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"message\":\"string\",\"issue\":\"string\"}'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update feedback",
                "description": "Update a task feedback",
                "operationId": "taskFeedbackUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "feedbackId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Feedback ID",
                        "example": "feedback-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedback updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Feedback Update",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Feedback details",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    },
                                    "issue": {
                                        "type": "string",
                                        "description": "Feedback issue"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/feedback/feedback-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"message\":\"string\",\"issue\":\"string\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Remove feedback",
                "description": "Remove a task feedback",
                "operationId": "taskFeedbackRemove",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "feedbackId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Feedback ID",
                        "example": "feedback-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedback removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/feedback/feedback-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}/reply": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Reply to feedback",
                "description": "Update a reply to a task feedback",
                "operationId": "taskFeedbackReply",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Value Item ID",
                        "example": "value-item-id-***"
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    {
                        "name": "feedbackId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Feedback ID",
                        "example": "feedback-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedback reply updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Task Feedback Reply",
                                "properties": {
                                    "reply": {
                                        "type": "string",
                                        "description": "Feedback reply",
                                        "minLength": 1,
                                        "maxLength": 1024
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/items/value-item-id-***/tasks/task-id-***/feedback/feedback-id-***/reply' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"reply\":\"string\"}'"
                    }
                ]
            }
        },
        "/organizations": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Create organization",
                "description": "Add an organization owned by the current user",
                "operationId": "organizationCreate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Organization created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Organization Create",
                                "properties": {
                                    "orgName": {
                                        "type": "string",
                                        "description": "Organization name",
                                        "minLength": 3,
                                        "maxLength": 64,
                                        "example": "Example, Inc."
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/organizations \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"orgName\":\"Example, Inc.\"}'"
                    }
                ]
            }
        },
        "/organizations/{orgId}": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Update organization",
                "description": "Update organization details",
                "operationId": "organizationUpdate",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Organization ID",
                        "example": "org-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Organization Update",
                                "properties": {
                                    "orgName": {
                                        "type": "string",
                                        "description": "Organization name",
                                        "minLength": 3,
                                        "maxLength": 64,
                                        "example": "Example, Inc."
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/organizations/org-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"orgName\":\"Example, Inc.\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete organization",
                "description": "Remove organization",
                "operationId": "organizationDelete",
                "parameters": [
                    {
                        "name": "orgId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Organization ID",
                        "example": "org-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/organizations/org-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels": {
            "post": {
                "tags": [
                    "Channels"
                ],
                "summary": "Create channel",
                "description": "Create a new channel for a team",
                "operationId": "channelCreate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Channel Create",
                                "properties": {
                                    "channelName": {
                                        "type": "string",
                                        "description": "Channel name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "channelDesc": {
                                        "type": "string",
                                        "description": "Channel description",
                                        "maxLength": 256,
                                        "default": ""
                                    }
                                },
                                "required": [
                                    "teamName"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"channelName\":\"string\",\"channelDesc\":\"\"}'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}": {
            "post": {
                "tags": [
                    "Channels"
                ],
                "summary": "Update channel",
                "description": "Update channel details for a team",
                "operationId": "channelUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Channel Update",
                                "properties": {
                                    "channelName": {
                                        "type": "string",
                                        "description": "Channel name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "channelDesc": {
                                        "type": "string",
                                        "description": "Channel description",
                                        "maxLength": 256,
                                        "default": ""
                                    }
                                },
                                "required": [
                                    "teamName"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"channelName\":\"string\",\"channelDesc\":\"\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Channels"
                ],
                "summary": "Delete channel",
                "description": "Delete a channel and unassign all users",
                "operationId": "channelDelete",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/channels/{channelId}/users/{userId}": {
            "put": {
                "tags": [
                    "Channels"
                ],
                "summary": "Assign to channel",
                "description": "Assign a user to a channel",
                "operationId": "channelAssign",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Channels"
                ],
                "summary": "Unassign from channel",
                "description": "Remove a user from a channel",
                "operationId": "channelUnassign",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/channels/channel-id-***/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Create team",
                "description": "Create a new team to this organization",
                "operationId": "teamCreate",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Team Create",
                                "properties": {
                                    "teamName": {
                                        "type": "string",
                                        "description": "Team name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "teamDesc": {
                                        "type": "string",
                                        "description": "Team description",
                                        "maxLength": 256,
                                        "default": ""
                                    }
                                },
                                "required": [
                                    "teamName"
                                ]
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url https://api.kronup.com/v1/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"teamName\":\"string\",\"teamDesc\":\"\"}'"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "List teams",
                "description": "Get a list of team models",
                "operationId": "teamList",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of teams for organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Team"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url https://api.kronup.com/v1/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Fetch team",
                "description": "Retrieve team model",
                "operationId": "teamRead",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Update team",
                "description": "Update team details",
                "operationId": "teamUpdate",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request Team Update",
                                "properties": {
                                    "teamName": {
                                        "type": "string",
                                        "description": "Team name",
                                        "minLength": 3,
                                        "maxLength": 64
                                    },
                                    "teamDesc": {
                                        "type": "string",
                                        "description": "Team description",
                                        "maxLength": 256,
                                        "default": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"teamName\":\"string\",\"teamDesc\":\"\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Delete team",
                "description": "Delete a team and unassign all users",
                "operationId": "teamDelete",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/teams/{teamId}/users/{userId}": {
            "put": {
                "tags": [
                    "Teams"
                ],
                "summary": "Assign to team",
                "description": "Assign a user to a team",
                "operationId": "teamAssign",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request PUT \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Unassign from team",
                "description": "Remove a user from a team",
                "operationId": "teamUnassign",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/teams/team-id-***/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "Get a list of user models",
                "operationId": "userList",
                "parameters": [
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Pagination: page number",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "example": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Pagination: page size",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "minimum": 1,
                            "example": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users in organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Users List",
                                    "type": "object",
                                    "properties": {
                                        "pageSize": {
                                            "type": "integer",
                                            "description": "Page size",
                                            "example": 100
                                        },
                                        "pageNumber": {
                                            "type": "integer",
                                            "description": "Page number",
                                            "example": 1
                                        },
                                        "users": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/users?pageNumber=1&pageSize=100' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        },
        "/users/{userId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Fetch user",
                "description": "Retrieve user model",
                "operationId": "userRead",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User model found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request GET \\\n  --url 'https://api.kronup.com/v1/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Update roles",
                "description": "Update the user model",
                "operationId": "userUpdateRole",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated. Returns updated fields and their new values",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "User Roles",
                                    "type": "object",
                                    "properties": {
                                        "roleSite": {
                                            "type": "string",
                                            "description": "User site role",
                                            "enum": [
                                                "admin",
                                                "moderator",
                                                "user"
                                            ]
                                        },
                                        "roleOrg": {
                                            "type": "string",
                                            "description": "User organization role",
                                            "enum": [
                                                "owner",
                                                "manager",
                                                "member"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Request User Role Update",
                                "properties": {
                                    "roleSite": {
                                        "type": "string",
                                        "description": "New site role",
                                        "example": "user"
                                    },
                                    "roleOrg": {
                                        "type": "string",
                                        "description": "New organization role",
                                        "example": "member"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request POST \\\n  --url 'https://api.kronup.com/v1/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-org-id: org-id-***' \\\n  --data '{\"roleSite\":\"user\",\"roleOrg\":\"member\"}'"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Remove user",
                "description": "Remove user from Organization",
                "operationId": "userRemove",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    {
                        "name": "x-org-id",
                        "in": "header",
                        "description": "Organization ID",
                        "required": true,
                        "example": "org-id-***",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User removed from organization",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error401"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error404"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "$ curl",
                        "source": "curl --request DELETE \\\n  --url 'https://api.kronup.com/v1/users/user-id-***' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-org-id: org-id-***'"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Error400": {
                "description": "Invalid argument error",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 400 ID",
                        "description": "Unique lowercase string that identifies this 400 error",
                        "example": "invalid-argument-*"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 400 message",
                        "description": "400 Error message (supports i18n)",
                        "example": "Invalid arguments provided"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error401": {
                "description": "Unauthorized error",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 401 ID",
                        "description": "Unique lowercase string that identifies this 401 error",
                        "example": "jwt/auth-*"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 401 message",
                        "description": "401 Error message (supports i18n)",
                        "example": "Authorization error"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error402": {
                "description": "Payment required",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 402 ID",
                        "description": "Unique lowercase string that identifies this 402 error",
                        "example": "payment-*"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 402 message",
                        "description": "402 Error message (supports i18n)",
                        "example": "Payment required error"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error403": {
                "description": "Operation not allowed",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 403 ID",
                        "description": "Unique lowercase string that identifies this 403 error",
                        "example": "not-allowed"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 403 message",
                        "description": "403 Error message (supports i18n)",
                        "example": "Not allowed"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Error404": {
                "description": "Resource not found",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Error 404 ID",
                        "description": "Unique lowercase string that identifies this 404 error",
                        "example": "not-found"
                    },
                    "message": {
                        "type": "string",
                        "title": "Error 404 message",
                        "description": "404 Error message (supports i18n)",
                        "example": "Not found"
                    }
                },
                "required": [
                    "id",
                    "message"
                ]
            },
            "Account": {
                "type": "object",
                "title": "Account",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "User e-mail address",
                        "example": "john@example.com"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name",
                        "example": "John Doe"
                    },
                    "userIcon": {
                        "type": "string",
                        "description": "User icon URL",
                        "example": "https://***"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "title": "User Team",
                            "properties": {
                                "teamId": {
                                    "type": "string",
                                    "description": "Team ID",
                                    "example": "team-id-***"
                                },
                                "channelIds": {
                                    "type": "array",
                                    "description": "Channels",
                                    "items": {
                                        "type": "string",
                                        "description": "Channel ID",
                                        "example": "channel-id-***"
                                    }
                                }
                            }
                        }
                    },
                    "roleSite": {
                        "type": "string",
                        "description": "User site role",
                        "enum": [
                            "admin",
                            "moderator",
                            "user"
                        ]
                    },
                    "roleOrg": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "title": "User Role Org",
                            "properties": {
                                "role": {
                                    "type": "string",
                                    "description": "User organization role",
                                    "enum": [
                                        "owner",
                                        "manager",
                                        "member"
                                    ]
                                },
                                "orgId": {
                                    "type": "string",
                                    "description": "Organization ID",
                                    "example": "org-id-***"
                                }
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "orgs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Organization"
                        }
                    }
                }
            },
            "Cache": {
                "type": "object",
                "title": "Cache",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Item ID",
                        "example": "key"
                    },
                    "value": {
                        "type": "string",
                        "description": "Item value",
                        "example": "value"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "Invitation": {
                "type": "object",
                "title": "Invitation",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Invitation ID",
                        "example": "invitation-id-***"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization ID",
                        "example": "org-id-***"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    "inviteName": {
                        "type": "string",
                        "description": "Invitation name",
                        "example": "General public"
                    },
                    "inviteDomain": {
                        "type": "string",
                        "description": "Invitation domain",
                        "example": "example.com"
                    },
                    "inviteOrgRole": {
                        "type": "string",
                        "description": "Invitation user role",
                        "enum": [
                            "manager",
                            "member"
                        ]
                    },
                    "inviteOrgName": {
                        "type": "string",
                        "description": "Invitation organzation name",
                        "example": "Organization, Inc."
                    },
                    "inviteUses": {
                        "type": "integer",
                        "min": 0,
                        "description": "Number of uses",
                        "example": 0
                    },
                    "inviteUsesMax": {
                        "type": "integer",
                        "min": 0,
                        "max": 10000,
                        "description": "Maximum number of uses",
                        "example": 0
                    },
                    "inviteViews": {
                        "type": "integer",
                        "min": 0,
                        "description": "Number of views",
                        "example": 0
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expires timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "ValueItem": {
                "type": "object",
                "title": "Value item",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization ID",
                        "example": "Organization, Inc."
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    "channelId": {
                        "type": "string",
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    "digest": {
                        "type": "string",
                        "description": "Value item digest",
                        "minLength": 1,
                        "maxLength": 256,
                        "example": "Value item number 1"
                    },
                    "details": {
                        "type": "string",
                        "description": "Value item description",
                        "minLength": 1,
                        "maxLength": 4096,
                        "example": "Item detailed description ***"
                    },
                    "authorId": {
                        "$ref": "#/components/schemas/ValueItemAuthor"
                    },
                    "stage": {
                        "type": "string",
                        "description": "Value Item Stage\n\n  * `p` - Planning\n  * `v` - Validation\n  * `x` - Execution\n  * `c` - Deep Context",
                        "enum": [
                            "p",
                            "v",
                            "x",
                            "c"
                        ],
                        "example": "p"
                    },
                    "canAdvance": {
                        "type": "boolean",
                        "description": "Value Item can advance to the next stage\n  * In Planning: at least 1 Assumption was added\n  * In Validation: all Assumptions were validated\n  * In Execution: all Tasks were completed",
                        "default": false
                    },
                    "type": {
                        "type": "string",
                        "description": "Value Item Type\n\n  * `f` - Feature\n  * `b` - Bug fix\n  * `c` - Chore",
                        "enum": [
                            "f",
                            "b",
                            "c"
                        ],
                        "example": "f"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Value Item Priority using MoSCoW\n\n  * `m` - Must-have\n  * `s` - Should-have\n  * `c` - Could-have\n  * `w` - Will NOT have",
                        "enum": [
                            "m",
                            "s",
                            "c",
                            "w"
                        ],
                        "example": "m"
                    },
                    "assumptions": {
                        "type": "array",
                        "description": "Assumptions",
                        "items": {
                            "$ref": "#/components/schemas/Assumption"
                        }
                    },
                    "tasks": {
                        "type": "array",
                        "description": "List of Tasks without Minutes",
                        "items": {
                            "$ref": "#/components/schemas/TaskCore"
                        }
                    }
                }
            },
            "ValueItemAuthor": {
                "type": "string",
                "title": "Author",
                "description": "Author ID",
                "example": "user-id-***"
            },
            "Assumption": {
                "type": "object",
                "description": "Value Item Assumption",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Value item ID",
                        "example": "value-item-id-***"
                    },
                    "authorId": {
                        "$ref": "#/components/schemas/ValueItemAuthor"
                    },
                    "digest": {
                        "type": "string",
                        "description": "Assumptions are formulated as simple statements that can be proven true or false; avoid questions and opinions.\n\n> ❌ What are the features?\n> \n> ❌ Does this feature exist?\n> \n> ❌ I don't like this feature.\n> \n> ✅ This feature exists.",
                        "example": "Electron.js supports Windows 7",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "Assumption was validated by experiments",
                        "default": false
                    },
                    "experiment": {
                        "type": "object",
                        "description": "Experiment",
                        "properties": {
                            "authors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ValueItemAuthor"
                                }
                            },
                            "confirmed": {
                                "type": "boolean",
                                "description": "Experiment confirms assumption",
                                "default": false
                            },
                            "digest": {
                                "type": "string",
                                "description": "Experiment findings formulated in one sentence",
                                "minLength": 1,
                                "maxLength": 256,
                                "example": "Tested latest version successfully with a virtual machine"
                            },
                            "details": {
                                "type": "string",
                                "description": "Experiment details",
                                "minLength": 1,
                                "maxLength": 4096
                            },
                            "state": {
                                "type": "string",
                                "description": "Experiment state\n\n  * `i` - Idle\n  * `r` - Running\n  * `d` - Done",
                                "enum": [
                                    "i",
                                    "r",
                                    "d"
                                ],
                                "default": "i"
                            }
                        }
                    }
                }
            },
            "TaskCore": {
                "type": "object",
                "title": "Task Core",
                "description": "Task model without Minutes",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    "assigneeId": {
                        "$ref": "#/components/schemas/ValueItemAuthor"
                    },
                    "digest": {
                        "type": "string",
                        "description": "Task title",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "details": {
                        "type": "string",
                        "description": "Task description",
                        "minLength": 1,
                        "maxLength": 4096
                    },
                    "state": {
                        "type": "string",
                        "description": "Task state\n\n  * `i` - Idle\n  * `p` - In progress\n  * `r` - In review\n  * `d` - Done",
                        "enum": [
                            "i",
                            "p",
                            "r",
                            "d"
                        ],
                        "default": "i"
                    },
                    "keywords": {
                        "type": "array",
                        "description": "Keywords",
                        "items": {
                            "type": "string",
                            "title": "Keyword ID"
                        }
                    }
                }
            },
            "Task": {
                "type": "object",
                "description": "Full Task model that includes Minutes",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Task ID",
                        "example": "task-id-***"
                    },
                    "minute": {
                        "$ref": "#/components/schemas/Minute"
                    },
                    "assigneeId": {
                        "$ref": "#/components/schemas/ValueItemAuthor"
                    },
                    "digest": {
                        "type": "string",
                        "description": "Task title",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "details": {
                        "type": "string",
                        "description": "Task description",
                        "minLength": 1,
                        "maxLength": 4096
                    },
                    "state": {
                        "type": "string",
                        "description": "Task state\n\n  * `i` - Idle\n  * `p` - In progress\n  * `r` - In review\n  * `d` - Done",
                        "enum": [
                            "i",
                            "p",
                            "r",
                            "d"
                        ],
                        "default": "i"
                    },
                    "keywords": {
                        "type": "array",
                        "description": "Keywords",
                        "items": {
                            "type": "string",
                            "title": "Keyword ID"
                        }
                    }
                }
            },
            "Keyword": {
                "type": "object",
                "title": "Keyword",
                "properties": {
                    "keyword": {
                        "type": "string",
                        "description": "Keyword",
                        "minLength": 1,
                        "maxLength": 64
                    },
                    "digest": {
                        "type": "string",
                        "description": "Keyword digest",
                        "minLength": 0,
                        "maxLength": 256
                    }
                }
            },
            "Minute": {
                "type": "object",
                "title": "Task Minute",
                "properties": {
                    "iteration": {
                        "type": "number",
                        "description": "Iteration number",
                        "min": 1,
                        "default": 1
                    },
                    "discoveries": {
                        "type": "array",
                        "description": "Discoveries",
                        "items": {
                            "type": "object",
                            "title": "Minute Discovery",
                            "description": "Task discovery recorded in an iteration",
                            "properties": {
                                "iteration": {
                                    "type": "number",
                                    "description": "Iteration number",
                                    "min": 1,
                                    "default": 1
                                },
                                "authorId": {
                                    "$ref": "#/components/schemas/ValueItemAuthor"
                                },
                                "details": {
                                    "type": "string",
                                    "description": "Discovery details",
                                    "minLength": 1,
                                    "maxLength": 1024
                                }
                            }
                        }
                    },
                    "feedback": {
                        "type": "array",
                        "description": "Feedback",
                        "items": {
                            "type": "object",
                            "title": "Minute Feedback",
                            "description": "Task feedback recorded in an iteration",
                            "properties": {
                                "iteration": {
                                    "type": "number",
                                    "description": "Iteration number",
                                    "min": 1,
                                    "default": 1
                                },
                                "authorId": {
                                    "$ref": "#/components/schemas/ValueItemAuthor"
                                },
                                "issue": {
                                    "type": "string",
                                    "description": "Feedback issue\n\n  * `v` - Value\n  * `c` - Complexity\n  * `f` - Flexibility\n  * `t` - Testing\n  * `s` - Security\n  * `ci` - CI/CD\n  * `st` - Standards\n  * `m` - Miscellaneous",
                                    "enum": [
                                        "v",
                                        "c",
                                        "f",
                                        "t",
                                        "s",
                                        "ci",
                                        "st",
                                        "m"
                                    ],
                                    "default": "v"
                                },
                                "message": {
                                    "type": "string",
                                    "description": "Feedback details",
                                    "minLength": 1,
                                    "maxLength": 1024
                                },
                                "reply": {
                                    "type": "string",
                                    "description": "Reply from assignee",
                                    "minLength": 1,
                                    "maxLength": 1024
                                }
                            }
                        }
                    }
                }
            },
            "Organization": {
                "type": "object",
                "title": "Organization",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Organization ID",
                        "example": "org-id-***"
                    },
                    "orgName": {
                        "type": "string",
                        "description": "Organization name",
                        "example": "Organization, Inc."
                    },
                    "orgIcon": {
                        "type": "string",
                        "description": "Organization logo URL",
                        "example": "https://***"
                    },
                    "orgOwners": {
                        "type": "array",
                        "description": "Organization owners",
                        "items": {
                            "type": "string",
                            "title": "User ID",
                            "example": "user-id-***"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "Team": {
                "type": "object",
                "title": "Team",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Team ID",
                        "example": "team-id-***"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization ID",
                        "example": "Organization, Inc."
                    },
                    "teamName": {
                        "type": "string",
                        "description": "Team name",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": "User Experience"
                    },
                    "teamDesc": {
                        "type": "string",
                        "description": "Team description",
                        "minLength": 0,
                        "maxLength": 256,
                        "example": ""
                    },
                    "channels": {
                        "type": "array",
                        "description": "Channels",
                        "items": {
                            "$ref": "#/components/schemas/Channel"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            },
            "Channel": {
                "type": "object",
                "description": "Channel",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Channel ID",
                        "example": "channel-id-***"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "default": false
                    },
                    "channelName": {
                        "type": "string",
                        "description": "Channel name",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": "General"
                    },
                    "channelDesc": {
                        "type": "string",
                        "description": "Channel description",
                        "minLength": 0,
                        "maxLength": 256,
                        "example": ""
                    }
                }
            },
            "User": {
                "type": "object",
                "title": "User",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID",
                        "example": "user-id-***"
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "User e-mail address",
                        "example": "john@example.com"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name",
                        "example": "John Doe"
                    },
                    "userIcon": {
                        "type": "string",
                        "description": "User icon URL",
                        "example": "https://***"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "title": "User Team",
                            "properties": {
                                "teamId": {
                                    "type": "string",
                                    "description": "Team ID",
                                    "example": "team-id-***"
                                },
                                "channelIds": {
                                    "type": "array",
                                    "description": "Channels",
                                    "items": {
                                        "type": "string",
                                        "description": "Channel ID",
                                        "example": "channel-id-***"
                                    }
                                }
                            }
                        }
                    },
                    "roleSite": {
                        "type": "string",
                        "description": "User site role",
                        "enum": [
                            "admin",
                            "moderator",
                            "user"
                        ]
                    },
                    "roleOrg": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "title": "User Role Org",
                            "properties": {
                                "role": {
                                    "type": "string",
                                    "description": "User organization role",
                                    "enum": [
                                        "owner",
                                        "manager",
                                        "member"
                                    ]
                                },
                                "orgId": {
                                    "type": "string",
                                    "description": "Organization ID",
                                    "example": "org-id-***"
                                }
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Created timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated timestamp",
                        "example": "2001-01-01T08:08:08.000+00:00"
                    }
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "API Key",
                "scheme": "bearer",
                "bearerFormat": "JSON Web Token"
            }
        }
    },
    "x-tagGroups": [
        {
            "name": "API",
            "tags": [
                "Account",
                "Users",
                "Invitations",
                "Organizations",
                "Teams",
                "Channels",
                "Value items",
                "Assumptions",
                "Tasks"
            ]
        }
    ]
}