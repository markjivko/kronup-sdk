<?php

/**
 * Implementation of {{baseName}} API
 *
 * @copyright {{copyright}}
 * @license   {{licenseInfo}}
 * @package   {{invokerPackage}}
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by {{theAuthorName}}
 * Do not edit this file manually!
 */

namespace {{apiPackage}};
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use {{invokerPackage}}\Sdk\Serializer as S;

/**
 * API for {{baseName}}
 */
class {{classname}} extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "{{#operations}}{{#operation}}{{#-first}}{{#tags}}{{#-first}}{{{name}}}{{/-first}}{{/tags}}{{/-first}}{{/operation}}{{/operations}}";

{{#operations}}
{{#operation}}
{{^isDeprecated}}
    /**
{{#summary}}
     * {{{summary}}}
{{/summary}}
{{^summary}}
     * Operation {{{operationId}}}
{{/summary}}
{{#description}}
     *
     * {{.}}
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
{{/vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#-first}}
     *
{{/-first}}
     * @param {{dataType}}{{^required}}|{{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}} ${{paramName}} {{#description}}{{.}}{{/description}}
{{/allParams}}
     * @throws \{{invokerPackage}}\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return {{#returnType}}{{.}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    public function {{operationId}}({{#hasParams}}{{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#isContainer}}array {{/isContainer}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$array{{/vendorExtensions.x-group-parameters}}{{/hasParams}}) {
        {{#vendorExtensions.x-group-parameters}}
        {{#allParams}}
        ${{paramName}} = array_key_exists("{{paramName}}", $array) ? $array["{{paramName}}"] : {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}};
        {{/allParams}}
        {{/vendorExtensions.x-group-parameters}}
        {{#allParams}}
        {{#required}}
        {{#isContainer}}
        if (empty(${{paramName}})) {
            throw new IAE(
                'Missing the required parameter ${{paramName}} when calling {{operationId}}'
            );
        }
        
        {{/isContainer}}
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
            throw new IAE('Invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}');
        }

        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
            throw new IAE('Invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}');
        }

        {{/minLength}}
        {{#maximum}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new IAE('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}');
        }

        {{/maximum}}
        {{#minimum}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new IAE('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }

        {{/minimum}}
        {{#pattern}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
            throw new IAE('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}');
        }

        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new IAE('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}');
        }

        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}isset(${{paramName}}) && {{/required}}count(${{paramName}}) < {{minItems}}) {
            throw new IAE('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}');
        }

        {{/minItems}}
        {{/hasValidation}}
        {{/allParams}}
        {{#isMultipart}}
        $rHeaders = $this->_headerSelector->selectHeadersForMultipart([{{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}]);
        {{/isMultipart}}
        {{^isMultipart}}
        $rHeaders = $this->_headerSelector->selectHeaders([{{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}], [{{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}]);
        {{/isMultipart}}
        {{#headerParams}}
        $rHeaders = array_merge(
            [{{#headerParams}}
            {{#collectionFormat}}
                "{{baseName}}" => S::serializeCollection(${{paramName}}, "{{collectionFormat}}"),
            {{/collectionFormat}}
            {{^required}}
                "{{baseName}}" => isset(${{paramName}}) ? S::toHeaderValue(${{paramName}}) : null,
            {{/required}}
            {{#required}}
                "{{baseName}}" => S::toHeaderValue(${{paramName}}),
            {{/required}}
            {{/headerParams}}], 
            $rHeaders
        );
        {{/headerParams}}

        // Path template
        $rPath = "((#stripHash)){{path}}((/stripHash))";
        {{#returnType}}
        /** @var {{returnType}} $result */
        $result = $this->exec(
        {{/returnType}}
        {{^returnType}}
        $this->exec(
        {{/returnType}}
            S::createRequest(
                $this->_sdk->config(), self::PKG, "{{httpMethod}}", {{^hasPathParams}}$rPath{{/hasPathParams}}{{#hasPathParams}}S::parse($rPath, [{{#pathParams}}"{{baseName}}" => {{#collectionFormat}}is_array(${{paramName}}) ? S::serializeCollection(${{paramName}}, "{{collectionFormat}}") : ${{paramName}}{{/collectionFormat}}{{^collectionFormat}}${{paramName}}{{/collectionFormat}}{{^-last}}, {{/-last}}{{/pathParams}}]){{/hasPathParams}}, $rPath, {{#hasQueryParams}}[
                {{#queryParams}}
                {{#required}}
                {{#collectionFormat}}
                    "{{baseName}}" => S::serializeCollection(${{paramName}}, "{{collectionFormat}}"),
                {{/collectionFormat}}
                {{^collectionFormat}}
                    "{{baseName}}" => S::toQueryValue(${{paramName}}),
                {{/collectionFormat}}
                {{/required}}
                {{^required}}
                {{#defaultValue}}
                {{#collectionFormat}}
                    "{{baseName}}" => S::serializeCollection(${{paramName}}, "{{collectionFormat}}"),
                {{/collectionFormat}}
                {{^collectionFormat}}
                    "{{baseName}}" => S::toQueryValue(${{paramName}}),
                {{/collectionFormat}}
                {{/defaultValue}}
                {{^defaultValue}}
                {{#collectionFormat}}
                    "{{baseName}}" => isset(${{paramName}}) ? S::serializeCollection(${{paramName}}, "{{collectionFormat}}") : null,
                {{/collectionFormat}}
                {{^collectionFormat}}
                    "{{baseName}}" => isset(${{paramName}}) ? S::toQueryValue(${{paramName}}) : null,
                {{/collectionFormat}}
                {{/defaultValue}}
                {{/required}}
                {{/queryParams}}
                ]{{/hasQueryParams}}{{^hasQueryParams}}[]{{/hasQueryParams}}, $rHeaders, [{{#formParams}}{{#isFile}}"{{baseName}}" => S::fileToFormValue(${{paramName}}),{{/isFile}}{{^isFile}}"{{baseName}}" => S::toString(${{paramName}}),{{/isFile}}{{/formParams}}]{{#bodyParams}}, ${{paramName}}{{/bodyParams}}
            ){{#returnType}}, 
            "{{returnType}}"{{/returnType}}
        );
        {{#returnType}}
            
        return $result;
        {{/returnType}}
    }
    
{{/isDeprecated}}
{{/operation}}
}
{{/operations}}
